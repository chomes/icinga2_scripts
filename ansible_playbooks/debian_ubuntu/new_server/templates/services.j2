/*
 * Service apply rules.
 *
 * The CheckCommand objects `ping4`, `ping6`, etc
 * are provided by the plugin check command templates.
 * Check the documentation for details.
 *
 * Tip: Use `icinga2 object list --type Service` to
 * list all service objects after running
 * configuration validation (`icinga2 daemon -C`).
 */

/*
 * This is an example host based on your
 * local host's FQDN. Specify the NodeName
 * constant in `constants.conf` or use your
 * own description, e.g. "db-host-1".
 */

/*
 * These are generic `ping4` and `ping6`
 * checks applied to all hosts having the
 * `address` resp. `address6` attribute
 * defined.
 */
apply Service "ping4" {
  import "generic-service"

  check_command = "ping4"
  command_endpoint = host.vars.client_endpoint
  assign where (host.address) && host.vars.os == "Linux"
}

apply Service "ping6" {
  import "generic-service"

  check_command = "ping6"
  command_endpoint = host.vars.client_endpoint
  assign where (host.address6) && host.vars.os == "Linux"
}

/*
 * Apply the `ssh` service to all hosts
 * with the `address` attribute defined and
 * the custom attribute `os` set to `Linux`.
 */
apply Service "ssh" {
  import "generic-service"

  check_command = "ssh"
  command_endpoint = host.vars.client_endpoint
  assign where (host.address || host.address6) && host.vars.os == "Linux"
}



apply Service for (http_vhost => config in host.vars.http_vhosts) {
  import "generic-service"

  check_command = "http"
  command_endpoint = host.vars.client_endpoint
  vars += config
}

apply Service for (time => config in host.vars.time) {
  import "generic-service"

  check_command = "time"
  command_endpoint = host.vars.client_endpoint
  vars += config
}

apply Service for (disk => config in host.vars.disks) {
  import "generic-service"

  check_command = "disk"
  command_endpoint = host.vars.client_endpoint
  vars += config
}


apply Service "icinga" {
  import "generic-service"

  check_command = "icinga"

  assign where host.name == NodeName
}

apply Service "load" {
  import "generic-service"
  check_command = "load"
  command_endpoint = host.vars.client_endpoint
  /* Used by the ScheduledDowntime apply rule in `downtimes.conf`. */
  vars.backup_downtime = "02:00-03:00"

  assign where host.vars.os == "Linux"
}

apply Service for (procs => config in host.vars.procs) {
  import "generic-service"
  check_command = "procs"
  command_endpoint = host.vars.client_endpoint
  vars += config
}

apply Service "swap" {
  import "generic-service"

  check_command = "swap"
  command_endpoint = host.vars.client_endpoint
  assign where host.vars.os == "Linux"
}

apply Service for (users => config in host.vars.users) {
  import "generic-service"

  check_command = "users"
  command_endpoint = host.vars.client_endpoint
  vars += config
}

apply Service "windows-memory" {
import "generic-service"
check_command = "memory-windows"
command_endpoint = host.vars.remote_client
assign where host.vars.os == "Windows"
}

apply Service "windows-disk" {
import "generic-service"
check_command = "disk-windows"
command_endpoint = host.vars.remote_client
assign where host.vars.os == "Windows"
}

apply Service "windows-updates" {
import "generic-service"
check_command = "update-windows"
command_endpoint = host.vars.remote_client
assign where host.vars.os == "Windows"
}

apply Service "windows-uptime" {
import "generic-service"
check_command = "uptime-windows"
command_endpoint = host.vars.remote_client
assign where host.vars.os == "Windows"
}

apply Service "windows-load" {
import "generic-service"
check_command = "load-windows"
command_endpoint = host.vars.remote_client
assign where host.vars.os == "Windows"
}

apply Service "windows-users" {
import "generic-service"
check_command = "users-windows"
command_endpoint = host.vars.remote_client
assign where host.vars.os == "Windows"
}


apply Service "windows-ping" {
import "generic-service"
check_command = "ping-windows"
command_endpoint = host.vars.remote_client
assign where (host.address || host.address6) && host.vars.os == "Windows"
}